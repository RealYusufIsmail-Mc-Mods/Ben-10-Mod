buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'


version = '1.16.5-1.17'
group = 'com.yusuf.bentenmod'
archivesBaseName = 'bentenmod'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
  
    mappings channel: 'official', version: '1.16.5'
    
    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'forge.logging.console.level', 'debug'
            mods {
                bentenmod {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'forge.logging.console.level', 'debug'

            mods {
                bentenmod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')       

            property 'forge.logging.console.level', 'debug'
            args '--mod', 'bentenmod', '--all',
            '--existing', file('src/main/resources').toString(),
            '--existing', file('src/generated/resources').toString(),
            '--output', file('src/generated/resources/')


            mods {
                bentenmod {
                    source sourceSets.main
                }

            }
        }
    }
}
sourceSets.main.resources {
    srcDir 'src/generated/resources'
}
def gpr_creds = {
    username = property('gpr.username')
    password = property('gpr.token')
}

repositories {
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven { url 'https://maven.blamejared.com' }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        url = uri("https://maven.pkg.github.com/realyusufismail/realyusufismail-core")
        credentials gpr_creds
    }
    compile fg.deobf("net.yusuf:realyusufismailcore:${project.ryic_version}") {
        exclude module: "forge"
    }
}

dependencies {

    minecraft 'net.minecraftforge:forge:1.16.5-36.1.2'
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.16.5:3.0.41')
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-50")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")

}





jar {
    manifest {
        attributes([
            "Specification-Title": "bentenmod",
            "Specification-Vendor": "Yusuf.I",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Yusuf.I",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
