import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'java'
    id 'eclipse'
    id "com.diffplug.spotless" version "6.25.0"
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'net.darkhax.curseforgegradle' version '1.1.17'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = "${mod_version}"
group = 'io.github.realyusufismail'
final var modId = mod_id
final var mcVersion = mcVersion
final var projectId = projectId
project.version = mod_version
base.archivesName.set(modId)

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: 'parchment', version: '2022.03.06-1.16.5'

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods { create(base.archivesName.get()) { source(sourceSets["main"]) } }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods { create(base.archivesName.get()) { source(sourceSets["main"]) } }
        }

        gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'


            mods { create(base.archivesName.get()) { source(sourceSets["main"]) } }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', archivesBaseName, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods { create(base.archivesName.get()) { source(sourceSets["main"]) } }

            // 'runData' is renamed to 'runDataGenerator' to make it more clear what it does.
            taskName("runDataGenerator")
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    maven { url = 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven { url = 'https://maven.blamejared.com' }
    maven { url = 'https://dvs1.progwml6.com/files/maven/' }
    maven { url = 'https://modmaven.dev' }
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"

    // Geckolib
    implementation(fg.deobf("software.bernie.geckolib:geckolib-forge-${geckolib_version}"))

    // RealYusufIsmailCore
    implementation("io.github.realyusufismail:realyusufismailcore:${ryc_version}")

    // Patchouli
    runtimeOnly(fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}"))

    // JEI
    compileOnly(fg.deobf("mezz.jei:jei-${mcVersion}:${jei_version}:api"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${mcVersion}:${jei_version}"))
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "bentenmod",
                "Specification-Vendor"    : "Yusuf.I",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Yusuf.I",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

spotless {
    java {
        // Excludes build folder since it contains generated java classes.
        targetExclude("build/**")
        palantirJavaFormat()
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
        licenseHeader(
                """/*
 * Copyright 2023 RealYusufIsmail.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 *
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ """)
    }
}

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    group = "CurseForge"
    dependsOn("build")
    disableVersionDetection()

    var token = project.hasProperty('curseforge.token') ? project.property('curseforge.token') as String : ""
    apiToken = token

    final var jar = file("build/libs/${base.archivesName.get()}-${project.version}.jar")

    final var mainFile = upload(projectId, jar)
    mainFile.changelog = file("CHANGELOG.md").getText()
    mainFile.changelogType = "markdown"
    mainFile.releaseType = "release"
    mainFile.addJavaVersion("Java 8")
    mainFile.addModLoader("Forge")
    mainFile.addGameVersion(mcVersion)
}