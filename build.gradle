import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'java'
    id 'eclipse'
    id "com.diffplug.spotless" version "6.20.0"
    id 'net.minecraftforge.gradle' version "[6.0,6.2)"
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'net.darkhax.curseforgegradle' version '1.1.15'
    id 'org.spongepowered.mixin' version '0.7.+'
}

project.version = '1.19.4-1.0.0'
project.group = "io.github.realyusufismail"
base.archivesName.set('bentenmod')
final var mcVersion = "1.19.4"
// A project ID is required to tell CurseForge which project the uploaded
// file belongs to. This is public on your project page and is not private
// information.
final var projectId = "459985"


// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: 'parchment', version: "1.19.4-2023.06.26-$mcVersion"

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods { create(base.archivesName.get()) { source(sourceSets["main"]) } }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods { create(base.archivesName.get()) { source(sourceSets["main"]) } }
        }

        gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'


            mods { create(base.archivesName.get()) { source(sourceSets["main"]) } }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', archivesBaseName, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods { create(base.archivesName.get()) { source(sourceSets["main"]) } }

            // 'runData' is renamed to 'runDataGenerator' to make it more clear what it does.
            taskName("runDataGenerator")
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.4-45.1.0'
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.19.4:4.2')
    //Logger
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.4.11'
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.4.11'
    //test
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
    //core
    implementation group: 'io.github.realyusufismail', name: 'realyusufismailcore', version: '1.19-1.1.1'
    //anotation
    annotationProcessor("org.projectlombok:lombok:1.18.28")
    compileOnly("org.projectlombok:lombok:1.18.28")
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

test {
    useJUnitPlatform()
}


configurations.configureEach {
    //noinspection GrUnresolvedAccess
    // ez vulnerability fix
    exclude group: "org.slf4j", module: "slf4j-log4j12"
}

compileJava {
    // Makes spotlessApply task run on every compile/build.
    dependsOn 'spotlessApply'

    // Nails the Java-Version of every Subproject
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

spotless {
    java {
        // Excludes build folder since it contains generated java classes.
        targetExclude("build/**")
        eclipse('4.19').configFile("${rootProject.rootDir}/meta/formatting/google-style-eclipse.xml")
    }

   groovyGradle {
       target("**/*.gradle")
       eclipse {
           version('4.19')
       }
       trimTrailingWhitespace()
       indentWithSpaces()
       endWithNewline()
   }
}

javadoc {
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
        logging.captureStandardError LogLevel.INFO
        logging.captureStandardOutput LogLevel.INFO
    }

    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    group = "CurseForge"
    dependsOn("build")
    disableVersionDetection()

    var token = project.hasProperty('curseforge.token') ? project.property('curseforge.token') as String : ""
    apiToken = token

    final var jar = file("build/libs/${base.archivesName.get()}-${project.version}.jar")

    final var mainFile = upload(projectId, jar)
    mainFile.changelog = file("CHANGELOG.md").getText()
    mainFile.changelogType = "markdown"
    mainFile.releaseType = "release"
    mainFile.addEmbedded("realyusufismail-core")
    mainFile.addJavaVersion("Java 17")
    mainFile.addModLoader("forge")
    mainFile.addGameVersion(mcVersion)
}



tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
